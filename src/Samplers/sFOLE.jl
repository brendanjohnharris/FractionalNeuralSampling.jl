import ApproxFun: Operator, Derivative, Fun, Fourier, Laplacian, ApproxFunBase
import ..FractionalNeuralSampling: Power

function space_fractional_drift(ùúã; Œ±, domain, approx_n_modes = 10000)
    S = Fourier(domain) # Could use Laurent for complex functions
    D = Derivative(S, 1)
    Œî = maybeLaplacian(S)
    @assert isdiag(Œî)
    @assert all([Œî[i, i] for i in 1:length(100)] .<= 0.0) # * Should be negative for Fourier domain
    ùíü = Power(-Œî, (Œ± - 2) / 2) # The fractional LAPLACIAN
    ùúãs = Fun(ùúã, S, approx_n_modes)
    ‚àáùíüùúã = D * ùíü * ùúãs
    return ‚àáùíüùúã, ùúãs
end

function sfole_f!(du, u, p, t)
    ps, ùúã = p
    @unpack Œ∑, Œ±, ‚àáùíüùúã, Œª = ps
    x = divide_dims(u, dimension(ùúã)) |> only
    b = ‚àáùíüùúã(only(x)) / (ùúãs(only(x)) + Œª)
    du .= only(Œ∑ .* b)
end
function sfole_g!(du, u, p, t)
    ps, ùúã = p
    @unpack Œ∑, Œ± = ps
    du .= only(Œ∑)^(1 / Œ±) # ? √ó dW in the integrator.
end

function maybeLaplacian(S::ApproxFunBase.DirectSumSpace) # * If the space is 1D, use regular second derivative
    Derivative(S, 2)
end
function maybeLaplacian(S::ApproxFunBase.AbstractProductSpace) # * If the space is multidimensional, use Laplacian
    Laplacian(S)
end

"""
Space fractional overdamped langevin equation
"""
function sFOLE(;
               tspan,
               Œ∑, # Noise strength
               Œ±, # Fractional order
               ùúã, # Target distribution
               domain, # An Interval
               Œª = 0.001, # Regularization to avoid overflow in low-prob regions
               u0 = [0.0],
               boundaries = nothing,
               noise_rate_prototype = similar(u0),
               noise = NoiseProcesses.LevyProcess!(Œ±; ND = dimension(ùúã),
                                                   W0 = zero(u0)),
               approx_n_modes = 1000,
               alg = EM(),
               callback = (),
               kwargs...)
    ‚àáùíüùúã, ùúãs = space_fractional_drift(ùúã; Œ±, domain, approx_n_modes)
    Sampler(sfole_f!, sfole_g!;
            callback = CallbackSet(init(boundaries), callback...),
            u0,
            noise_rate_prototype,
            noise,
            tspan,
            p = (; Œ∑, Œ±, ‚àáùíüùúã, ùúãs, Œª),
            ùúã,
            alg,
            kwargs...) |> assert_dimension(; order = 1)
end

const SpaceFractionalOverdampedLangevinEquation = sFOLE
export sFOLE, SpaceFractionalOverdampedLangevinEquation
